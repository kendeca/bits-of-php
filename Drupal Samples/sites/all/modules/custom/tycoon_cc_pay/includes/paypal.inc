<?php
/**
 * @file
 * Classes to support the paypal payment methods
 *
 */

//
// // Temp function to make constructor work
//   function variable_get($var,$value){
//       return $value;
//   }
//


/**
  * Payment method object
  *
  * @author Ken Y
  */
class TycoonCCPaypal
{

  /**
   * The transaction that triggered this paypal interaction
   *
   */

   protected $txid;

  /**
   * If this will recur, then this is the recur array from the form.  It is
   * an empty array otherwise
   *
   */

   protected $recur=array();

  /**
   * If this will store one_click, then this is the one_click array from the form.  It is
   * an empty array otherwise
   *
   */

   protected $one_click=array();

  /**
   * If this will store client_covers_fees, then this is the client_covers_fees array. It is
   * an empty array otherwise.
   *
   */

   protected $client_covers_fees=array();

  /**
   * If this will store employer_match, then this is the employer_match array. It is
   * an empty array otherwise.
   *
   */

   protected $employer_match=array();

  /**
   * The flavor of paypal transaction we want:  express or reference
   *
   */

   protected $flavor;

  /**
   * The PayPal environment identifier for this object
   *
   */

   protected $environment;

  /**
   * The post_back_url from the donation form that spawned this paypal object.
   *
   */

   protected $linkback;

  /**
   * The API username that we created on PayPal's sandbox
   * or for the PayPal live site
   */

    protected $username;


 /**
  *  The password associated with the API username
  */

   protected $password;

  /**
   * The PayPal signature for this object.  This is generated by PayPal
   *
   */

   protected $signature;

  /**
   * The PayPal server URL for current context and credentials
   *
   */

   protected $endpoint;

  /**
   * The Paypal API version for the request.
   * It is a mandatory parameter for each API request.
   */

   protected $version;


   /**
    * Define the PayPal URL. This is the URL that the buyer is
    * first sent to to authorize payment with their paypal account
    * change the URL depending if you are testing on the sandbox
    * or going to the live PayPal site
    * For the sandbox, the URL is
    * https://www.sandbox.paypal.com/webscr&cmd=_express-checkout&token=
    * For the live site, the URL is
    * https://www.paypal.com/webscr&cmd=_express-checkout&token=
    */

   protected $payPalURL;

   /**
    * Holds the header for the nvp API call.
    */

    protected $nvpheader;


   /**
    * Holds the token for the nvp API call.
    */

    protected $token;


    /**
     * Array that holds the request for the most recent PayPal NVP API call
     */

     protected $reqArray;

   /**
     * Array that holds the response from the most recent PayPal NVP API call
     */

     protected $resArray;

    /**
     * Array that holds the response from the PayPal SetExpressCheckout API call
     */

     protected $set_express_checkout_result;

   /**
     * Array that holds the response from the PayPal DoExpressCheckout NVP API call
     */

     protected $do_express_checkout_result;

   /**
     * Array that holds the response from the PayPal GetExpressCheckoutDetails NVP API call
     */

     protected $get_express_checkout_details_result;

    /**
     * Array that holds the error number and error message if the curl request returns an error
     */

      protected $curl_error_message;

    /**
     * The url back to which Paypal will direct the user after a successful API call
     */

     protected $return_url;

    /**
     * The url back to which Paypal will direct the user after a failed API call
     */

     protected $cancel_url;


    /**
     * The currency code type
     */

     protected $currency_code;

     /**
      * The payment type for this transaction
      */

      protected $payment_type;


     /**
      * The payment action for this transaction
      */

      protected $payment_action;


     /**
      * The nonprofit name for this transaction
      */

      protected $np_name;



     /**
      * The donation amount for this transaction
      */

      protected $donation_amount;


     /**
      * The total paid for this transaction
      */

      protected $total_paid = 0.00;


     /**
      * The Paypal payer id for this transaction
      */

      protected $payer_id;


     /**
      * The Paypal payer's first name for this transaction
      */

      protected $payer_first;


     /**
      * The Paypal payer's last name for this transaction
      */

      protected $payer_last;


     /**
      * The Paypal payer email for this payer
      */

      protected $payer_email;


     /**
      * The Paypal fee as Paypal reported it
      */

      protected $paypal_fee;

     /**
      * The Form gen key associated with this transaction
      */

      protected $form_gen;


     /**
      * The most recent "ACK" from paypal
      */

      protected $paypal_nvp_ack;

     /**
      * Error array if Paypal API returned an error
      */

      protected $paypal_nvp_error;


     /**
      * Payment status one of:
     *  None – No status.
      *  Canceled-Reversal – A reversal has been canceled; for example, when you
      *     win a dispute and the funds for the reversal have been returned to you.
      *  Completed – The payment has been completed, and the funds have been added
      *     successfully to your account balance.
      *  Denied – You denied the payment. This happens only if the payment was
      *     previously pending because of possible reasons described for the
      *     PendingReason element.
      *  Expired – the authorization period for this payment has been reached.
      *  Failed – The payment has failed. This happens only if the payment was made
      *     from your buyer’s bank account.
      *  In-Progress – The transaction has not terminated, e.g. an authorization may be
      *     awaiting completion.
      *  Partially-Refunded – The payment has been partially refunded.
      *  Pending – The payment is pending. See the PendingReason field for more
      *     information.
      *  Refunded – You refunded the payment.
      *  Reversed – A payment was reversed due to a chargeback or other type of
      *     reversal. The funds have been removed from your account balance and returned to
      *     the buyer. The reason for the reversal is specified in the ReasonCode element.
      *  Processed – A payment has been accepted.
      *  Voided – An authorization for this transaction has been voided.
      *  Completed-Funds-Held – The payment has been completed, and the funds      */

      protected $payment_status;


  /**
    *  F I E L D S   F O R   R E F E R E N C E   T R A N S A C T I O N S
    */

 /**
   * L_BILLINGTYPEn
   *
   * Type of billing agreement for reference transactions. This field must be
   * set to one of the following values:
   *    MerchantInitiatedBilling - PayPal creates a billing agreement for each
   *                               transaction associated with buyer. You must
   *                               specify version 54.0 or higher to use this
   *                               option.
   *    MerchantInitiatedBillingSingleAgreement - PayPal creates a single
   *                               billing agreement for all transactions
   *                               associated with buyer. Use this value unless
   *                               you need per-transaction billing agreements.
   *                               You must specify version 58.0 or higher to
   *                               use this option.
   */

   protected $billing_type = 'MerchantInitiatedBilling';

 /**
   * L_BILLINGAGREEMENTDESCRIPTIONn
   *
   * Description of goods or services associated with the billing agreement.
   * This field is required for each reference payment billing agreement.
   * PayPal recommends that the description contain a brief summary of the
   * billing agreement terms and conditions. For example, buyer is billed at
   * “9.99 per month for 2 years”.
   * Character length and limitations: 127 single-byte alphanumeric characters
   *
   */

   protected $billing_agreement_description = 'Creating billing agreement';


  /**
   * BILLINGAGREEMENTID
   *
   * The ID of the billing agreement associated with the Express Checkout
   * transaction.
   *
   */

   protected $billing_agreement_id = "";




 /**
   *  E N D   F I E L D S   F O R   R E F E R E N C E   T R A N S A C T I O N S
   */

    /**
      * Array with the current values for the active paypal transaction.
      */

      protected $db_record;


  /**
   * Constructor for this class
   */
  function __construct($txid = 0,$flavor = 'express') {
      //@todo Set up variables.  Make sure they are urlencoded.
      $this->username = (variable_get('cc_pp_username','ccpay_1343168213_biz_api1.gmail.com'));
      $this->environment = (variable_get('cc_pp_environment','sandbox'));
      $this->password = (variable_get('cc_pp_password','1343168236'));
      $this->signature = (variable_get('cc_pp_signature','AalEHdhy4S72paa-t6Wa6UZpX75AAeJbsur.xQNHsA3Vb.QwU1SreRTO'));
      $this->version = (variable_get('cc_pp_version','92.0'));
      $this->endpoint = (variable_get('cc_pp_endpoint','https://api-3t.sandbox.paypal.com/nvp'));
      $this->payPalURL = (variable_get('cc_pp_paypalurl','https://www.sandbox.paypal.com/webscr'));
      $this->curl_error_message = array();
      $this->currency_code = 'USD';
      $this->payment_action = 'sale';
      $this->server_ip  = (urlencode ($_SERVER['SERVER_NAME']));
      $this->paypal_nvp_error = array();
      $this->txid = $txid;
      $this->flavor = $flavor;
      $this->recur = array();
      $this->one_click = array();
      $this->client_covers_fees = array();
      $this->employer_match = array();

      if ($txid > 0) $this->load_by_txid($txid);
    }


  // Functions from the PayPal examples that are now methods in this object.

  /**
   * Sets up the paypal header for password/user/signature authorization.
   */
  private function _nvpHeader  (){
    $nvpheaderStr = "";
      $AuthMode = "3TOKEN";
      $nvpheaderStr = "&PWD=".urlencode($this->password)."&USER=".urlencode($this->username)."&SIGNATURE=".urlencode($this->signature);
      return $nvpheaderStr;
    }

  /**
   * _paypal_nvp_call: Function to perform the API call to PayPal using API signature
   * @methodName is name of API  method.
   * @nvpStr is nvp string.
   * returns an associtive array containing the response from the server.
   */


  private function _paypal_nvp_call  ($methodName,$nvpStr)
  {
        if (isset($_REQUEST['ken_debug'])
          || ($this->flavor == 'reference'))
            {
              $err_msg = "\n\nEnter _paypal_nvp_call with "
                ."\n\n **** methodName = ".var_export($methodName, TRUE)
                ."\n\n **** nvpStr = ".var_export($nvpStr, TRUE);
              watchdog('ken_debug',$err_msg."\n\n\n");
            }

   // form header string
    $this->nvpheader=$this->_nvpHeader();
    //setting the curl parameters.
    $ch = curl_init();
    curl_setopt($ch, CURLOPT_URL,$this->endpoint);
    curl_setopt($ch, CURLOPT_VERBOSE, 1);

    //turning off the server and peer verification(TrustManager Concept).
    curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, TRUE);
    curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, 2);

    curl_setopt($ch, CURLOPT_RETURNTRANSFER,1);
    curl_setopt($ch, CURLOPT_POST, 1);


    $nvpStr=$this->nvpheader.$nvpStr;

    //check if version is included in $nvpStr else include the version.
    if(strlen(str_replace('VERSION=', '', strtoupper($nvpStr))) == strlen($nvpStr)) {
      $nvpStr = "&VERSION=" . urlencode($this->version) . $nvpStr;
    }

    $nvpreq="METHOD=".urlencode($methodName).$nvpStr;

    if (isset($_REQUEST['ken_debug'])
      || ($this->flavor == 'reference'))
        {
          $err_msg = "\n\nIn _paypal_nvp_call about to curl "
            ."\n\n **** nvpreq = ".var_export($nvpreq, TRUE)
            ."\n\n **** nvpStr = ".var_export($nvpStr, TRUE);
          watchdog('ken_debug',$err_msg."\n\n\n");
        }



    //setting the nvpreq as POST FIELD to curl
    curl_setopt($ch,CURLOPT_POSTFIELDS,$nvpreq);

    //getting response from server
    $response = curl_exec($ch);

     if (curl_errno($ch) == 60) {

          curl_setopt($ch, CURLOPT_CAINFO,
          dirname(__FILE__) . '/cacert.pem');
          $response = curl_exec($ch);
      }

    //converting NVPResponse to an Associative Array
    $resArray=$this->_deformatNVP($response);
    $reqArray=$this->_deformatNVP($nvpreq);
    $this->reqArray=$reqArray;
    $this->resArray=$resArray;

    if (curl_errno($ch)) {
      // capture and log the curl error.
        $this->curl_error_number['curl_error_no']=curl_errno($ch) ;
        $this->curl_error_message['curl_error_msg']=curl_error($ch);
        $log_message =
            "Curl error "
            .($this->curl_error_message['curl_error_no'])
            .":  "
            .($this->curl_error_message['curl_error_msg'])
    ;
        if (isset($_REQUEST['ken_debug'])
          || ($this->id == 'tycoon_cc_pay_paypal_reference'))
            { watchdog('ken_debug','\n\n**** Curl log message ='.$log_message);
            }
  //		  watchdog('curl', $log_message);
        return NULL;

     } else {
       //closing the curl
        curl_close($ch);
      }

  if (isset($_REQUEST['ken_debug'])
    || ($this->flavor == 'reference')){
        watchdog('ken_debug',$methodName." Results:  ".var_export($resArray,true));
        }

         $this->paypal_nvp_ack = strtoupper($resArray["ACK"]);

         if($this->paypal_nvp_ack == 'SUCCESS' || $this->paypal_nvp_ack == 'SUCCESSWITHWARNING'){
            return $resArray;
          }
          else  {
            // Paypal returned an error, Set the paypal error array
            $this->paypal_nvp_error['ack'] = $resArray['ACK'];
            $this->paypal_nvp_error['timestamp'] = $resArray['TIMESTAMP'];
            for ($i = 0; $i < 10; $i++) {
              if (isset($resArray['L_ERRORCODE'.$i])) {
                $this->paypal_nvp_error['error'][$i]['code'] = $resArray['L_ERRORCODE'.$i];
                $this->paypal_nvp_error['error'][$i]['short_message'] = $resArray['L_SHORTMESSAGE'.$i];
                $this->paypal_nvp_error['error'][$i]['long_message'] = $resArray['L_LONGMESSAGE'.$i];
                $this->paypal_nvp_error['error'][$i]['severity'] = $resArray['L_SEVERITYCODE'.$i];
                if(isset($resArray['L_ERRORPARAMID'.$i])) {
                    $this->paypal_nvp_error['error'][$i]['param_id'] = $resArray['L_ERRORPARAMID'.$i];
                    $this->paypal_nvp_error['error'][$i]['param_value'] = $resArray['L_ERRORPARAMVALUE'.$i];
                }
                $log_message = $this->paypal_nvp_error['error'][$i]['code']." -- ".$this->paypal_nvp_error['error'][$i]['short_message'];
                if (isset($_REQUEST['ken_debug'])){ watchdog('ken_debug',$log_message); }
          //		  watchdog('paypal', $log_message);
              }
            }

            return NULL;
          }


  return $resArray;
  }

  /** This function will take NVPString and convert it to an Associative Array and it will decode the response.
    * It is usefull to search for a particular key and displaying arrays.
    * @nvpstr is NVPString.
    * @nvpArray is Associative Array.
    */

  private function _deformatNVP  ($nvpstr)
  {

    $intial=0;
    $nvpArray = array();


    while(strlen($nvpstr)){
      //postion of Key
      $keypos= strpos($nvpstr,'=');
      //position of value
      $valuepos = strpos($nvpstr,'&') ? strpos($nvpstr,'&'): strlen($nvpstr);

      /*getting the Key and Value values and storing in a Associative Array*/
      $keyval=substr($nvpstr,$intial,$keypos);
      $valval=substr($nvpstr,$keypos+1,$valuepos-$keypos-1);
      //decoding the respose
      $nvpArray[urldecode($keyval)] =urldecode( $valval);
      $nvpstr=substr($nvpstr,$valuepos+1,strlen($nvpstr));
       }
    return $nvpArray;
  }

  /**
   * This function will set up an express payment transaction on Paypal
   */
  function set_express_checkout() {
    // Set up the request string
    if (isset($_REQUEST['ken_debug'])){ watchdog('ken_debug',"In set_express_checkout_details (1): this = ".var_export($this,true)); }

    if(
      !(isset($this->payment_action)
        && isset($this->donation_amount)
        && isset($this->return_url)
        && isset($this->cancel_url)
        && isset($this->currency_code)
      )
      ) return NULL; // Some fields are not set
    $itemamt = 0.00;
    $itemamt = $this->donation_amount;
    $amt = $itemamt;
    $maxamt= $amt+25.00;
    $nvpstr="&ADDRESSOVERRIDE=0" // No address for paypal
      ."&L_PAYMENTREQUEST_0_NAME0=".urlencode($this->np_name)
      ."&L_PAYMENTREQUEST_0_AMT0=".$this->donation_amount
      ."&L_PAYMENTREQUEST_0_QTY0=1" // Always just one donation
      ."&L_PAYMENTREQUEST_0_DESC0=Donation"
      ."&MAXAMT=".(string)$maxamt
      ."&PAYMENTREQUEST_0_AMT=".(string)$amt
      ."&PAYMENTREQUEST_0_ITEMAMT=".(string)$itemamt
      ."&CALLBACKTIMEOUT=4"
      ."&RETURNURL=".$this->return_url
      .""
      ."&CANCELURL=".$this->cancel_url
      .""
      ."&CURRENCYCODE=".$this->currency_code
      .""
      ."&PAYMENTREQUEST_0_PAYMENTACTION=".$this->payment_action;

    if ($this->flavor == 'reference'){
      // Add reference transaction fields.
      $nvpstr = $nvpstr
        ."&L_BILLINGTYPE0=".$this->billing_type
        ."&L_BILLINGAGREEMENTDESCRIPTION0=".$this->billing_agreement_description
        ;
    }

      if (isset($_REQUEST['ken_debug'])){ watchdog('ken_debug',"In set_express_checkout_details (2): nvpstr = ".var_export($nvpstr,true)); }


    //@todo Record the basic transaction information.
    $this->set_express_checkout_result = $this->_paypal_nvp_call("SetExpressCheckout",$nvpstr);
    $this->resArray = $this->set_express_checkout_result;
    if (!empty($this->set_express_checkout_result)){

      // The set API call starts
      $this->paypal_nvp_ack = strtoupper(($this->set_express_checkout_result['ACK']));
      if($this->paypal_nvp_ack == 'SUCCESS' || $this->paypal_nvp_ack == 'SUCCESSWITHWARNING'){

        $this->token = $this->set_express_checkout_result['TOKEN'];
        $this->db_record['set_timestamp'] = strtotime($this->set_express_checkout_result['TIMESTAMP']);

      }  else {

        //@todo Process the error code.

      }

    }
    return $this;

  }

  /**
   * Execute Paypal's GetExpressCheckoutDetails API call
   */
  function get_express_checkout_details() {
    if (isset($_REQUEST['ken_debug'])){ watchdog('ken_debug',"In get_express_checkout_details: " . var_export($this,true)); }

    $nvpstr="&TOKEN=".$this->token;

//     Make the API call and store the results in an array.

    $this->resArray=$this->_paypal_nvp_call("GetExpressCheckoutDetails",$nvpstr);

    if (isset($_REQUEST['ken_debug'])){ watchdog('ken_debug',"get_express_checkout_details result: ".var_export($this->resArray, true)); }

    // Update database.

    //@todo store important details.
    if ($this->token == $this->resArray['TOKEN']
      && $this->donation_amount == $this->resArray['L_AMT0']) {
      $this->db_record['checkout_status'] = $this->resArray['CHECKOUTSTATUS'];
      $this->db_record['get_timestamp'] = strtotime($this->resArray['TIMESTAMP']);
      $this->paypal_nvp_ack = $this->resArray['ACK'];
      $this->db_record['payer_email'] = $this->resArray['EMAIL'];
      $this->payer_email = $this->resArray['EMAIL'];
      $this->db_record['payer_id'] = $this->resArray['PAYERID'];
      $this->payer_id = $this->resArray['PAYERID'];
      $this->db_record['payer_status'] = $this->resArray['PAYERSTATUS'];
      $this->db_record['payer_first'] = $this->resArray['FIRSTNAME'];
      $this->payer_first = $this->resArray['FIRSTNAME'];
      $this->db_record['payer_last'] = $this->resArray['LASTNAME'];
      $this->payer_last = $this->resArray['LASTNAME'];
      $this->db_record['donation_amount'] = $this->resArray['L_AMT0'];
      $this->total_paid = $this->resArray['L_AMT0'];
      $this->db_record['currency_code'] = $this->resArray['PAYMENTREQUEST_0_CURRENCYCODE'];
//      $this->db_record['error_code'] = $this->resArray['PAYMENTREQUESTINFO_0_ERRORCODE'];

      $this->checkout_details = $this->resArray;
    } else {

//    Tokens don't match error
      if (isset($_REQUEST['ken_debug'])){ watchdog('ken_debug','Express checkout data don\'t match'); }
//      watchdog('paypal_error','Express checkout data don\'t match');

    }

    return $this;
  }

  /**
   * Execute Paypal's DoExpressCheckout API call
   */
  function do_express_checkout() {

    $nvpstr='&TOKEN='.$this->token
      .'&PAYERID='.$this->payer_id
      .'&PAYMENTACTION='.$this->payment_action
      .'&AMT='.$this->donation_amount
      .'&CURRENCYCODE='.$this->currency_code;

//     Make the call to PayPal to finalize payment

    $this->resArray=$this->_paypal_nvp_call("DoExpressCheckoutPayment",$nvpstr);
    $this->do_express_checkout_result = $this->resArray;

    if (isset($_REQUEST['ken_debug'])){
      watchdog('ken_debug',"\n\nIn do_express_checkout do_express_checkout_result = \n\n"
      . var_export($this->do_express_checkout_result, true));
    }

    //Set the local attributes

    //todo check for paypal error code
    if (($this->token == $this->do_express_checkout_result['TOKEN'])
        && ($this->donation_amount == $this->do_express_checkout_result['PAYMENTINFO_0_AMT'])){
      //Set the local attributes
      $this->paypal_nvp_ack = $this->do_express_checkout_result['PAYMENTINFO_0_ACK'];
      $this->payment_type = $this->do_express_checkout_result['PAYMENTINFO_0_PAYMENTTYPE'];
      $this->paypal_fee = $this->do_express_checkout_result['PAYMENTINFO_0_FEEAMT'];
      $this->currency_code = $this->do_express_checkout_result['PAYMENTINFO_0_CURRENCYCODE'];
      $this->payment_status = $this->do_express_checkout_result['PAYMENTINFO_0_PAYMENTSTATUS'];
      if (isset($this->do_express_checkout_result['BILLINGAGREEMENTID']) && ($this->do_express_checkout_result['BILLINGAGREEMENTID']!="")){
        $this->billing_agreement_id = $this->do_express_checkout_result['BILLINGAGREEMENTID'];
        if (!empty($this->recur)) $this->recur['cc_payment_profile_values']['pay_method']['paypal_account'] = $this->billing_agreement_id;
        if (!empty($this->one_click)) $this->one_click['cc_payment_profile_values']['pay_method']['paypal_account'] = $this->billing_agreement_id;
      } else {
        $this->billing_agreement_id = "";
      }

      //Set the database record
      $this->db_record['do_timestamp']=strtotime($this->do_express_checkout_result['TIMESTAMP']);
      $this->db_record['paypal_transaction_id']=$this->do_express_checkout_result['PAYMENTINFO_0_TRANSACTIONID'];
      $this->db_record['paypal_transaction_type']=$this->do_express_checkout_result['PAYMENTINFO_0_TRANSACTIONTYPE'];
      $this->db_record['payment_type']=$this->do_express_checkout_result['PAYMENTINFO_0_PAYMENTTYPE'];
      $this->db_record['paypal_fee']=0.00+($this->do_express_checkout_result['PAYMENTINFO_0_FEEAMT']);
      $this->db_record['currency_code']=$this->do_express_checkout_result['PAYMENTINFO_0_CURRENCYCODE'];
      $this->db_record['payment_status']=$this->do_express_checkout_result['PAYMENTINFO_0_PAYMENTSTATUS'];
      $this->db_record['pending_reason']=$this->do_express_checkout_result['PAYMENTINFO_0_PENDINGREASON'];
      $this->db_record['reason_code']=$this->do_express_checkout_result['PAYMENTINFO_0_REASONCODE'];
      $this->db_record['billing_agreement_id']= $this->billing_agreement_id;
      $this->db_record['recur'] = serialize($this->recur);
      $this->db_record['one_click'] = serialize($this->one_click);
      $this->db_record['client_covers_fees'] = serialize($this->client_covers_fees);
      $this->db_record['employer_match'] = serialize($this->employer_match);

      if (isset($_REQUEST['ken_debug'])){
        watchdog('ken_debug',"In do_express_checkout -- db_record = " . var_export($this->db_record, true)); }
      } else {
        //@todo process error
        if (isset($_REQUEST['ken_debug'])){ watchdog('ken_debug',"Data did not match after doExpressCheckout API call"); }
        watchdog("Paypal","Data did not match after doExpressCheckout API call");
      }

//
    return $this;

  }

  /**
   * Execute Paypal's DoReferenceTransaction API call
   */
  function do_reference_transaction() {

    // ken_debug reference
    $err_msg = "\n\nIn do_reference_transaction with this =\n\n"
      .var_export($this, true);
    watchdog('ken_debug reference', $err_msg);


    $nvpstr='&REFERENCEID='.$this->billing_agreement_id
      .'&PAYMENTACTION=Sale'
      .'&AMT='.$this->donation_amount
      .'&CURRENCYCODE='.$this->currency_code;

//     Make the call to PayPal to finalize payment

    $this->resArray=$this->_paypal_nvp_call("DoReferenceTransaction",$nvpstr);
    $this->do_reference_transaction_result = $this->resArray;

      watchdog('ken_debug reference',"\n\nIn do_reference_transaction do_reference_transaction_result = \n\n"
      . var_export($this->do_reference_transaction_result, true));

    //Set the local attributes

    //todo check for paypal error code
    if (($this->billing_agreement_id == $this->do_reference_transaction_result['BILLINGAGREEMENTID'])){
      //Set the local attributes
      $this->paypal_nvp_ack = $this->do_reference_transaction_result['ACK'];
      $this->payment_type = $this->do_reference_transaction_result['PAYMENTTYPE'];
      $this->paypal_fee = $this->do_reference_transaction_result['FEEAMT'];
      $this->currency_code = $this->do_reference_transaction_result['CURRENCYCODE'];
      $this->payment_status = $this->do_reference_transaction_result['PAYMENTSTATUS'];


      //Set the database record
      $this->db_record['do_timestamp']=strtotime($this->do_reference_transaction_result['TIMESTAMP']);
      $this->db_record['paypal_transaction_id']=$this->do_reference_transaction_result['TRANSACTIONID'];
      $this->db_record['paypal_transaction_type']=$this->do_reference_transaction_result['TRANSACTIONTYPE'];
      $this->db_record['payment_type']=$this->do_reference_transaction_result['PAYMENTTYPE'];
      $this->db_record['paypal_fee']=0.00+($this->do_reference_transaction_result['FEEAMT']);
      $this->db_record['currency_code']=$this->do_reference_transaction_result['CURRENCYCODE'];
      $this->db_record['payment_status']=$this->do_reference_transaction_result['PAYMENTSTATUS'];
      $this->db_record['pending_reason']=$this->do_reference_transaction_result['PENDINGREASON'];
      $this->db_record['reason_code']=$this->do_reference_transaction_result['REASONCODE'];
      $this->db_record['billing_agreement_id']= $this->billing_agreement_id;
      $this->db_record['recur'] = serialize($this->recur);

        watchdog('ken_debug reference',"In do_reference_transaction -- db_record = " . var_export($this->db_record, true));
      } else {
        //@todo process error
        watchdog('ken_debug reference',"Data did not match after doReferenceTransaction API call");
        watchdog("Paypal","Data did not match after doReferenceTransaction API call");
      }

//
    return $this;

  }

// Getters and setters

  /**
   * Set the linkback field for the PayPal object
   */
   function set_linkback($linkback){
    $this->linkback = $linkback;
    return $this->linkback;
   }

  /**
  * Get the linkback field for the PayPal object
  */
  function get_linkback(){
    return $this->linkback;
  }

  /**
   * Set the recur array for this transaction
   */
  function set_recur($recur){
    $this->recur = $recur;
    return $this->recur;
  }

  /**
   * Get the recur array for this transaction
   */
   function get_recur(){
    return $this->recur;
   }

 /**
   * Set the one_click array for this transaction
   */
  function set_one_click($one_click){
    $this->one_click = $one_click;
    return $this->one_click;
  }

  /**
   * Get the one_click array for this transaction
   */
   function get_one_click(){
    return $this->one_click;
   }

 /**
   * Set the client_covers_fees array for this transaction
   */
  function set_client_covers_fees($client_covers_fees){
    $this->client_covers_fees = $client_covers_fees;
    return $this->client_covers_fees;
  }

  /**
   * Get the client_covers_fees array for this transaction
   */
   function get_client_covers_fees(){
    return $this->client_covers_fees;
   }

 /**
   * Set the employer_match array for this transaction
   */
  function set_employer_match($employer_match){
    $this->employer_match = $employer_match;
    return $this->employer_match;
  }

  /**
   * Get the employer_match array for this transaction
   */
   function get_employer_match(){
    return $this->employer_match;
   }

  /**
   * Set the form gen token for this transaction
   */
  function set_form_gen($form_gen){
    $this->form_gen = $form_gen;
    return $this->form_gen;
  }

  /**
   * Get the form gen token for this transaction
   */
   function get_form_gen(){
    return $this->form_gen;
   }

  /**
   * Set the form gen token for this transaction
   */
  function set_flavor($flavor){
    $this->flavor = $flavor;
    return $this->flavor;
  }

  /**
   * Get the form gen token for this transaction
   */
   function get_flavor(){
    return $this->flavor;
   }

  /**
   * Set the form gen token for this transaction
   */
  function set_billing_agreement_id($billing_agreement_id){
    $this->billing_agreement_id = $billing_agreement_id;
    return $this->billing_agreement_id;
  }

  /**
   * Get the form gen token for this transaction
   */
   function get_billing_agreement_id(){
    return $this->billing_agreement_id;
   }

  /**
   * Set the environment field for the PayPal object
   */
   function set_environment($environment){
    $this->environment = $environment;
    return $environment;
   }

  /**
   * Get the environment field for the PayPal object
   */
   function get_environment(){
    return $this->environment;
   }

  /**
   * Set the username field for the PayPal object
   */
   function set_username($username){
    $this->username = $username;
    return $username;
   }

  /**
   * Get the username field for the PayPal object
   */
   function get_username(){
    return $this->username;
   }

  /**
   * Set the password field for the PayPal object
   */
   function set_password($password){
     $this->password = $password;
    return $password;
   }

  /**
   * Get the password field for the PayPal object
   */
   function get_password(){
    return $this->password;
   }

  /**
   * Set the signature field for the PayPal object
   */
   function set_signature($signature){
     $this->signature = $signature;
    return $signature;
   }

  /**
   * Get the signature field for the PayPal object
   */
   function get_signature(){
    return $this->signature;
   }

  /**
   * Set the payment_status field for the PayPal object
   */
   function set_payment_status($payment_status){
     $this->payment_status = $payment_status;
    return $payment_status;
   }

  /**
   * Get the payment_status field for the PayPal object
   */
   function get_payment_status(){
    return $this->payment_status;
   }

  /**
   * Set the endpoint field for the PayPal object
   */
   function set_endpoint($endpoint){
     $this->endpoint = $endpoint;
    return $endpoint;
   }

  /**
   * Get the endpoint field for the PayPal object
   */
   function get_endpoint(){
    return $this->endpoint;
   }

  /**
   * Set the version field for the PayPal object
   */
   function set_version($version){
     $this->version = $version;
    return $version;
   }

  /**
   * Get the version field for the PayPal object
   */
   function get_version(){
    return $this->version;
   }

    /**
   * Set the payPalURL field for the PayPal object
   */
   function set_payPalURL($payPalURL){
     $this->payPalURL = $payPalURL;
    return $payPalURL;
   }

  /**
   * Get the payPalURL field for the PayPal object
   */
   function get_payPalURL(){
    return $this->payPalURL;
   }

    /**
   * Set the nvpheader field for the PayPal object
   */
   function set_nvpheader($nvpheader){
     $this->nvpheader = $nvpheader;
    return $nvpheader;
   }

  /**
   * Get the nvpheader field for the PayPal object
   */
   function get_nvpheader(){
    return $this->nvpheader;
   }

  /**
   * Set the token field for the PayPal object
   */
   function set_token($token){
     $this->token = $token;
    return $token;
   }

  /**
   * Get the token field for the PayPal object
   */
   function get_token(){
    return $this->token;
   }

  /**
   * Set the reqArray field for the PayPal object
   */
   function set_reqArray($reqArray){
     $this->reqArray = $reqArray;
    return $reqArray;
   }

  /**
   * Get the reqArray field for the PayPal object
   */
   function get_reqArray(){
    return $this->reqArray;
   }

  /**
   * Set the resArray field for the PayPal object
   */
   function set_resArray($resArray){
     $this->resArray = $resArray;
    return $resArray;
   }

  /**
   * Get the resArray field for the PayPal object
   */
   function get_resArray(){
    return $this->resArray;
   }

  /**
   * Set the curl_error_message array for the PayPal object
   */
   function set_curl_error_message($curl_error_message){
     $this->curl_error_message = $curl_error_message;
    return $curl_error_message;
   }

  /**
   * Get the curl_error_message array for the PayPal object
   */
   function get_curl_error_message(){
    return $this->curl_error_message;
   }

  /**
   * Set the cancel_url value for the PayPal object
   */
   function set_cancel_url($cancel_url){
     $this->cancel_url = $cancel_url;
    return $cancel_url;
   }

  /**
   * Get the cancel_url value for the PayPal object
   */
   function get_cancel_url(){
    return $this->cancel_url;
   }

  /**
   * Set the return_url value for the PayPal object
   */
   function set_return_url($return_url){
     $this->return_url = $return_url;
    return $return_url;
   }

  /**
   * Get the return_url value for the PayPal object
   */
   function get_return_url(){
    return $this->return_url;
   }


  /**
   * Set the currency_code value for the PayPal object
   */
   function set_currency_code($currency_code){
     $this->currency_code = $currency_code;
    return $currency_code;
   }

  /**
   * Get the currency_code value for the PayPal object
   */
   function get_currency_code(){
    return $this->currency_code;
   }

  /**
   * Set the donation_amount value for the PayPal object
   */
   function set_donation_amount($donation_amount){
     $this->donation_amount = $donation_amount;
    return $donation_amount;
   }

  /**
   * Get the donation_amount value for the PayPal object
   */
   function get_donation_amount(){
    return $this->donation_amount;
   }

 /**
   * Set the total_paid value for the PayPal object
   */
   function set_total_paid($total_paid){
     $this->total_paid = $total_paid;
    return $total_paid;
   }

  /**
   * Get the total_paid value for the PayPal object
   */
   function get_total_paid(){
    return $this->total_paid;
   }

  /**
   * Set the np_name value for the PayPal object
   */
   function set_np_name($np_name){
     $this->np_name = $np_name;
    return $np_name;
   }

  /**
   * Get the np_name value for the PayPal object
   */
   function get_np_name(){
    return $this->np_name;
   }


 /**
   * Set the payment_action value for the PayPal object
   */
   function set_payment_action($payment_action){
     $this->payment_action = $payment_action;
    return $payment_action;
   }

  /**
   * Get the payment_action value for the PayPal object
   */
   function get_payment_action(){
    return $this->payment_action;
   }


 /**
   * Set the payment_type value for the PayPal object
   */
   function set_payment_type($payment_type){
     $this->payment_type = $payment_type;
    return $payment_type;
   }

  /**
   * Get the payment_type value for the PayPal object
   */
   function get_payment_type(){
    return $this->payment_type;
   }


 /**
   * Set the payer_id value for the PayPal object
   */
   function set_payer_id($payer_id){
     $this->payer_id = $payer_id;
    return $payer_id;
   }

  /**
   * Get the payer_id value for the PayPal object
   */
   function get_payer_id(){
    return $this->payer_id;
   }

/**
   * Set the payer_first value for the PayPal object
   */
   function set_payer_first($payer_first){
     $this->payer_first = $payer_first;
    return $payer_first;
   }

  /**
   * Get the payer_first value for the PayPal object
   */
   function get_payer_first(){
    return $this->payer_first;
   }

/**
   * Set the payer_last value for the PayPal object
   */
   function set_payer_last($payer_last){
     $this->payer_last = $payer_last;
    return $payer_last;
   }

  /**
   * Get the payer_last value for the PayPal object
   */
   function get_payer_last(){
    return $this->payer_last;
   }

 /**
   * Set the payer_email value for the PayPal object
   */
   function set_payer_email($payer_email){
     $this->payer_email = $payer_email;
    return $payer_email;
   }

  /**
   * Get the payer_email value for the PayPal object
   */
   function get_payer_email(){
    return $this->payer_email;
   }

 /**
   * Set the Tycoon txid value for this object
   */
   function set_txid($txid){
     $this->txid = $txid;
    return $txid;
   }

  /**
   * Get the Tycoon txid value for this object
   */
   function get_txid(){
    return $this->txid;
   }

   /**
    * Get the paypal fee
    */
   function get_paypal_fee()
   {
    return $this->paypal_fee;
   }


  /**
   * Get the most recent Paypal ACK result from the Paypal NVP API
   */
   function get_paypal_nvp_ack(){
    return $this->paypal_nvp_ack;
   }

  /**
   * Load this express checkout from the database using the specified txid.
   * If the record does not exist, then create it!
   *
   * @param txid
   *   The Tycoon transaction id for this record.
   * @return
   *   This transaction if load is successful, false otherwise.
   */

   function load_by_txid($txid){

   // @todo Figure out why the regular dynamic database API did not work here!

   $output=true;

    if (isset($_REQUEST['ken_debug'])){ watchdog('ken_debug',"In load_by_txid with txid =".$txid); }


    // Load the transaction
   $query = "select * from {tycoon_cc_pay_paypal} where "
              ."txid = ".$txid." "
              ."order by timestamp DESC LIMIT 1";

    $res = db_query($query);
           $this->db_record = $res->fetchAssoc();

        if (isset($_REQUEST['ken_debug'])){ watchdog('ken_debug',"\n\n** in paypal load_by_txid \n\n this->db_record = \n".var_export($this->db_record,true)); }

      if($this->db_record){
        // We have a record, set up the local variables
        $this->paypal_init_from_db_record();
        $output = $this;
      }
      else {
        // No record, create one.
        $this->db_record = Array();
        $this->db_record['txid'] = $txid;
        $this->db_record['timestamp'] = time();
        $this->db_record['ppid'] = db_insert('tycoon_cc_pay_paypal')
          ->fields($this->db_record)
          ->execute();
        if (is_numeric($this->db_record['ppid'])){
          $this->ppid = $this->db_record['ppid'];
          $this->txid = $txid;
          $output = $this;
        }
        else {
          $this->db_record = null;
          $output = false;
        }
      }
      return $output;

   }

  /**
   * Save this object's data into the database
   */
  function save() {
    if (isset($_REQUEST['ken_debug'])) {
      $err_msg = "\n\nIn save in paypal.inc\n\n"
                ."\n\n\paypal object = ".var_export($this, 1)
                ;
      watchdog('ken_debug',$err_msg);
    }

    // Update the record with lastest values
    $this->paypal_update_db_record();
    $fields = $this->db_record;
    $ppid = $fields['ppid'];
    unset($fields['ppid']);

    $rows = db_update('tycoon_cc_pay_paypal')
      ->fields($this->db_record)
      ->condition('ppid',$ppid)
      ->execute();

    return $rows;
  }
  /**
   * Initialize the protected attributes from the $db_record array.
   */
  function paypal_init_from_db_record() {

    if (isset($_REQUEST['ken_debug'])){ watchdog('ken_debug',"In paypal_init_from_db_record with db_record = ".var_export($this->db_record,true)); }
    $this->ppid = $this->db_record['ppid'];
    $this->txid = $this->db_record['txid'];
    $this->token = $this->db_record['token'];
    $this->donation_amount = $this->db_record['donation_amount'];
    $this->paypal_fee = $this->db_record['paypal_fee'];
    $this->payer_id = $this->db_record['payer_id'];
    $this->currency_code = $this->db_record['currency_code'];
    $this->payment_type = $this->db_record['payment_type'];
    $this->payment_action = $this->db_record['payment_action'];
    $this->payer_id = $this->db_record['payer_id'];
    $this->payer_last = $this->db_record['payer_last'];
    $this->payer_first = $this->db_record['payer_first'];
    $this->np_name = $this->db_record['np_name'];
    $this->linkback = $this->db_record['linkback'];
    $this->payer_email = $this->db_record['payer_email'];
    $this->form_gen = $this->db_record['form_gen'];
    $this->billing_agreement_id = $this->db_record['billing_agreement_id'];
    $this->recur = unserialize($this->db_record['recur']);
    $this->one_click = unserialize($this->db_record['one_click']);
    $this->client_covers_fees = unserialize($this->db_record['client_covers_fees']);
    $this->employer_match = unserialize($this->db_record['employer_match']);

    return;
  }


 /**
   * Update the $this->db_record array after data changes
   */
  function paypal_update_db_record() {
    $this->db_record['ppid'] = $this->ppid;
    $this->db_record['txid'] = $this->txid;
    $this->db_record['token'] = $this->token;
    $this->db_record['donation_amount'] = $this->donation_amount;
    $this->db_record['paypal_fee'] = $this->paypal_fee;
    $this->db_record['payer_id'] = $this->payer_id;
    $this->db_record['currency_code'] = $this->currency_code;
    $this->db_record['payment_type'] = $this->payment_type;
    $this->db_record['payment_action'] = $this->payment_action;
    $this->db_record['payer_id'] = $this->payer_id;
    $this->db_record['payer_first'] = $this->payer_first;
    $this->db_record['payer_last'] = $this->payer_last;
    $this->db_record['np_name'] = $this->np_name;
    $this->db_record['linkback'] = $this->linkback;
    $this->db_record['payer_email'] = $this->payer_email;
    $this->db_record['form_gen'] = $this->form_gen;
    $this->db_record['billing_agreement_id']= $this->billing_agreement_id;
    $this->db_record['recur']= serialize($this->recur);
    $this->db_record['one_click']= serialize($this->one_click);
    $this->db_record['client_covers_fees']= serialize($this->client_covers_fees);
    $this->db_record['employer_match']= serialize($this->employer_match);

    return;
  }

  /**
   * Redirect the user to paypal for validation of this Express Checkout transaction_do
   * This function should not return.
   */
  function go_to_paypal(){
    $this->save(); // Save the object because we're going away.


    $token = urldecode($this->resArray["TOKEN"]);
    $payPalURL = $this->payPalURL
          ."?cmd=_express-checkout"
          ."&token=".($this->token)
          ;

     $log_message = 'In go_to_paypal \n\n$this = '.var_export($this, true)
                    .'\n\n$payPalURL = '.var_export($payPalURL,true);
    if (isset($_REQUEST['ken_debug'])){ watchdog('ken_debug',$log_message); }


    // Bye
  //  header("Location: ".$payPalURL);
    drupal_goto($payPalURL, array('external'=>TRUE));

    $log_message = 'OOPS; Redirect failed';
    if (isset($_REQUEST['ken_debug'])){ watchdog('ken_debug',$log_message); }

    return false;

  }

}

?>
